{"ownername":"plotdb","key":992,"name":"Dancing Stacked Bar","owner":4,"theme":null,"parent":null,"description":"stacked bar chart variation that vertically aligned to selected bar block.","basetype":["1"],"visualencoding":["1","3"],"category":["5","6"],"tags":["proportion","compare"],"likes":10,"searchable":true,"dimlen":2,"createdtime":"2016-02-16T06:22:57.000Z","modifiedtime":"2017-01-01T18:50:44.000Z","doc":{"name":"document","size":0,"type":"html","lines":1,"content":""},"style":{"name":"stylesheet","size":0,"type":"css","lines":1,"content":""},"code":{"name":"code","size":13531,"type":"javascript","lines":335,"content":"{\n  sample: function() {\n    var list = d3.range(7 + Math.round(Math.random() * 3));\n    var list2 = d3.range(3 + Math.round(Math.random() * 2));\n    var order = [{name: \"order\", data: list.map(function(d) { return d + 1; })}];\n    var value = list2.map(function(d) {\n      return {name: plotdb.data.sample.category[d], data: list.map(function() { return parseInt(Math.random() * 10); })};\n    });\n    return {order: order, value: value};\n  },\n  dimension: {\n    value: { type: [plotdb.Number], multiple: true, require: true, desc: \"y axis value\" },\n    order: { type: [plotdb.Order], require: true, desc: \"x axis index\" },\n  },\n  config: {\n    fontFamily: {},\n    background: {},\n    textFill: {},\n    fontSize: {},\n    margin: {},\n    padding: {},\n    palette: {},\n    boxRoundness: {},\n    stroke: {},\n    strokeWidth: {},\n    legendLabel: {},\n    legendShow: {},\n    yAxisShow: {},\n    yAxisLabel: {},\n    yAxisTickSizeInner: {},\n    yAxisTickSizeOuter: {},\n    yAxisTickPadding: {},\n    yAxisShowDomain: {default: true},\n    yAxisTickCount: {},\n    yAxisLabelPosition: {},\n    yAxisStroke: {},\n    xAxisShow: {},\n    xAxisLabel: {},\n    xAxisTickSizeInner: {},\n    xAxisTickSizeOuter: {},\n    xAxisTickPadding: {},\n    xAxisTickCount: {},\n    xAxisStroke: {},\n    xAxisShowDomain: {default: true},\n    xAxisHandleOverlap: {},\n    xAxisTickDirection: {},\n    popupShow: {},\n    sort: {rebindOnChange: true},\n    sortBy: {name: \"Sort By\", type: [plotdb.Choice([\"Value\", \"Order\"])], default: \"Order\", category: \"Value\", rebindOnChange: true},\n    unit: {}\n  },\n  init: function() {\n    var that = this;\n    this.svg = d3.select(this.root).append(\"svg\");\n    this.legendGroup = this.svg.append(\"g\").attr({class: \"legend-group\"});\n    this.xAxisGroup = this.svg.append(\"g\").attr({class: \"axis horizontal\"});\n    this.xAxisGroupOuter = this.svg.append(\"g\").attr({class: \"axis horizontal\"});\n    this.xAxisGroupOuter.append(\"line\").attr({class: \"axis horizontal domain\"});\n    this.yAxisGroup = this.svg.append(\"g\").attr({class: \"axis vertical\"});\n    this.svg.on(\"mousemove\", function() {\n      if(that.target) { that.target.active = false; }\n      target = d3.select(d3.event.target).datum();\n      if(target) target.active = true;\n      that.target = target;\n      that.render();\n    });\n    this.tooltip = plotd3.html.tooltip(this.root).on(\"mousemove\", function(d,i,popup) {\n      if(!that.target) return;\n      popup.style({\"font-size\": that.config.fontSize+\"px\"});\n      popup.select(\".title\").text(that.target.name);\n      popup.select(\".value\").text([\n        (that.parsed.order[that.target.order]?that.parsed.order[that.target.order].value:\"\"),\n        that.target.value,\n        (that.config.unit ? \" \" + that.config.unit : \"\")\n      ].join(\" \"));\n    });\n  },\n  parse: function() {\n    var that = this;\n    var sgn = (this.config.sort == \"Ascending\" ? -1 : 1);\n    if(!this.dimension.order.fields.length) this.data.map(function(d,i) { return d.order = i; });\n    if(this.config.sort != \"None\") {\n      if(this.config.sortBy==\"Order\") {\n        plotdb.Order.sort(this.data, \"order\", (this.config.sort == \"Ascending\" ? true : false));\n      } else {\n        this.data.map(function(d,i) { d.sum = d.value.reduce(function(a,b) { return a + b; }, 0); });\n        this.data.sort(function(a,b) { return sgn * (b.sum - a.sum); });\n      }\n    }\n    this.maxSum = 0;\n    this.globalBase = 0;\n    var p = this.parsed = {\n      bars: [],\n      order: [],\n      group: [],\n      values: []\n    };\n    var list = null;\n    if(this.data.length) {\n      isOrderDate = (plotdb.Date.test(this.data[0].order));\n      p.order = this.data.map(function(it) { return {\n        idx: 0,\n        value: it.order,\n        parsed: (isOrderDate?new Date(it.order).getTime()/1000:it.order)\n      };});\n      if(this.config.sortBy == \"Order\") p.order.sort(function(a,b){\n        if(a.parsed > b.parsed) { return -sgn; }\n        else if (a.parsed < b.parsed) { return sgn; }\n        return 0;\n      });\n      p.order.forEach(function(d,i) { d.idx = i; });\n      for(var j=0;j < this.data[0].value.length; j++) {\n        p.group.push({\n          name: (this.dimension.value && this.dimension.value.fieldName\n                 ?(this.dimension.value.fieldName[j] || j):j),\n          idx: j\n        }); /* name: should fetch from field meta */\n        p.values = this.data.map(function(it) { return it.value; }).reduce(function(a,b) { return a.concat(b); }, []);\n        //p.values = p.values.concat(dots.data.map(function(it) { return it.value;}));\n      }\n      var maxSum = 0;\n      for(var j=0; j < this.data.length; j++) {\n        /* order of \"order\" might be re-arranged so we have to lookup again */        \n        var orderIdx = (p.order.filter(function(it) { return it.value == that.data[j].order; })[0] || {idx: -1}).idx;\n        p.bars.push(bars = {order: orderIdx, data: []});\n        bars.data = this.data[j].value.map(function(d,i) {\n          return {\n            name: (that.dimension.value && that.dimension.value.fieldName\n                   ?(that.dimension.value.fieldName[i] || i):i),\n            order: orderIdx,\n            value: d,\n            base: 0,\n            group: i\n          };\n        });\n        bars.data.sort(function(a,b) { return b.order - a.order;});\n        var sum = 0;\n        for(var i=0;i<bars.data.length;i++) {\n          bars.data[i].sum = sum;\n          sum += bars.data[i].value;\n        }\n        if(sum > maxSum) maxSum = sum;\n      }\n      var maxs = d3.range(this.data[0].value.length).map(function(i) {\n        return d3.max(that.data.map(function(it) { return it.value[i]; }));\n      });\n      var sums = this.data.map(function(it) { return d3.sum(it.value); });\n      this.maxSum = 0;\n      for(var i=0;i<sums.length;i++) {\n        for(var j=0,v;j<maxs.length;j++) {\n          v = sums[i] - this.data[i].value[j] + maxs[j];\n          if(this.maxSum < v) this.maxSum = v;\n        }\n      }\n    }\n    this.maxSum *= 1.1;\n    if(this.maxSum == 0) this.maxSum = 1;\n    this.categories = this.dimension.value.fieldName;\n  },\n  bind: function() {\n    var that = this,sel;\n    sel = this.svg.selectAll(\"g.series.bar\").data(this.parsed.bars);\n    sel.exit().remove();\n    sel.enter().append(\"g\").attr({class: \"series bar\"});\n    this.rectGroup = this.svg.selectAll(\"g.series.bar\").each(function(it) {\n      var sel = d3.select(this).selectAll(\"rect.data\").data(it.data);\n      sel.exit().remove();\n      sel.enter().append(\"rect\").attr({class: \"data\"}).on(\"click\", function(it) {\n        b = that.parsed.bars;\n        that.globalBase = 0;\n        for(var i = 0; i < b.length; i++) {\n          base = 0;\n          for(var j = 0; j < b[i].data.length; j++) {\n            if(b[i].data[j].group == it.group) {\n              base = b[i].data[j].sum;\n              if(base > that.globalBase) that.globalBase = base;\n            }\n          }\n          for(var j = 0; j < b[i].data.length; j++) {\n            b[i].data[j].base = base;\n          }\n        }\n        that.render();\n      });\n    });\n    this.rects = this.svg.selectAll(\"rect.data\");\n    if(this.config.popupShow) this.tooltip.nodes(this.rects);\n    this.legendGroup.selectAll(\"g\")\n    .on(\"mouseover\", function(it) { \n      that.activeGroup = that.parsed.group.filter(function(d,i) {\n        return d.name == it;\n      })[0];\n      that.render();\n    }).on(\"mouseout\", function(it) {\n      that.activeGroup = null; that.render();\n    });\n  },\n  resize: function() {\n    var that = this;\n    var box = this.root.getBoundingClientRect();\n    var width = this.width = box.width;\n    var height = this.height = box.height;\n    var m = this.config.margin;\n    this.svg.attr({\n      width: width + \"px\", height: height + \"px\",\n      viewBox: [0,0,width,height].join(\" \"),\n      preserveAspectRatio: \"xMidYMid\"\n    });\n    this.cscale = plotdb.Palette.scale.ordinal(this.config.palette);\n    this.legend = plotd3.rwd.legend()\n      .scale(this.cscale).orient(\"bottom\").tickValues(this.categories)\n      .label(this.config.legendLabel || \"\")\n      .size([this.width - 2 * this.config.margin, 100])\n      .fontSize(this.config.fontSize);\n    this.legendGroup.call(this.legend);\n    this.legendSize = (this.config.legendShow ? this.legend.offset() : [0,0]);\n    this.yScale = d3.scale.linear()\n      .domain([0, this.maxSum])\n      .range([height - m - this.legendSize[1] - (this.config.legendShow ? this.config.fontSize : 0), m]);\n    this.yAxis = plotd3.rwd.axis()\n      .orient(\"left\").scale(this.yScale)\n      .label(this.config.yAxisLabel || \"\")\n      .labelPosition(this.config.yAxisLabelPosition)\n      .tickSize(this.config.yAxisTickSizeInner, this.config.yAxisTickSizeOuter)\n      .tickPadding(this.config.yAxisTickPadding)\n      .ticks(this.config.yAxisTickCount)\n      .fontSize(this.config.fontSize)\n      .tickFormat(function(d) { return parseInt(100*d)/100; });\n    this.yAxisGroup.call(this.yAxis);\n    this.yAxisWidth = (this.config.yAxisShow ? this.yAxis.offset() + this.config.fontSize * 2 : 0);\n    this.barWidth = ( width - m * 2 - this.yAxisWidth ) / this.parsed.order.length;\n\n    this.xscale = d3.scale.ordinal()\n      .domain(this.parsed.order.map(function(it) { return it.idx; }))\n      .rangePoints([m + this.yAxisWidth, width - m - this.barWidth]);\n\n    this.xAxis = plotd3.rwd.axis()\n      .orient(\"bottom\")\n      .label(this.config.xAxisLabel || \"\")\n      .labelPosition(this.config.xAxisLabelPosition)\n      .tickSize(this.config.xAxisTickSizeInner, this.config.xAxisTickSizeOuter)\n      .ticks(this.config.xAxisTickCount)\n      .tickPadding(this.config.xAxisTickPadding)\n      .tickDirection(this.config.xAxisTickDirection)\n      .handleOverlap(this.config.xAxisHandleOverlap)\n      .tickFormat(function(it) {\n        return that.parsed.order[it].value;\n      });\n    this.xAxis.scale(this.xscale);\n    this.xAxisGroup.call(this.xAxis);\n    this.xAxisHeight = (this.config.xAxisShow ? this.xAxis.offset() : 0);\n    this.yScale.range([height - m - (this.config.legendShow ? this.legendSize[1] + this.config.fontSize : 0) - this.xAxisHeight, m]);\n    this.yAxisGroup.call(this.yAxis);\n    this.xticks = this.xAxis.tickValues();\n    this.xticklen = d3.max(this.xticks.map(function(it) { return (\"\" + it).length; }));\n    if ( ( width - 2 * m - this.barWidth - this.yAxisWidth ) / this.xticks.length \n    < this.xticklen * this.config.fontSize ) {\n      this.overlap = true;\n    }\n  },\n  render: function() {\n    var that = this;\n    var range = this.xscale.range();\n    if(this.config.fontFamily) d3.select(this.root).style(\"font-family\", this.config.fontFamily);\n    d3.select(this.root).style(\"background-color\", this.config.background);\n    this.svg.selectAll(\"text\").attr({\n      \"font-size\": that.config.fontSize,\n      \"fill\": that.config.textFill\n    });\n\n    this.legendGroup.attr({\n      transform: [\"translate(\", (this.width - this.legendSize[0])/2, this.height - this.legendSize[1] - this.config.margin, \")\"].join(\" \"),\n      display: this.config.legendShow ? \"block\" : \"none\"\n    });\n    this.rects.filter(function() { return !d3.select(this).attr(\"x\"); }).attr({\n      width: this.barWidth,\n      height: 0,\n      y: function(it) { return that.yScale(it.sum); },\n      opacity: 0\n    });\n    this.rects.attr({\n      rx: this.config.boxRoundness, ry: this.config.boxRoundness,\n      \"stroke-width\": this.config.strokeWidth, stroke: this.config.stroke,\n      fill: function(it) { return that.cscale(it.name); }\n    }).transition().duration(200).attr({\n      y: function(it) { return that.yScale(it.sum + it.value - it.base * 1 + 1 * that.globalBase) - 2; },\n      x: function(it) { return that.xscale(it.order); },\n      width: this.barWidth,\n      height: function(it) { return that.yScale(it.sum) - that.yScale(it.sum + it.value) },\n      opacity: function(d,i) {\n        return (d.active ? 0.5 : 1);\n      }\n    });\n    this.rects.transition(\"opacity\").duration(500).style({\n      opacity: function(it) { \n        return (!that.activeGroup || that.activeGroup.idx == it.group ? 1 : 0.2);\n      }\n    });\n    this.xAxisGroup.attr({\n      \"transform\": \"translate(\"+(this.barWidth/2)+\",\" + (this.yScale.range()[0]) + \")\",\n      display: this.config.xAxisShow ? \"block\" : \"none\"\n    }).selectAll(\".tick\").style({\n      opacity: function(d,i) {\n        return (that.overlap && i % 2 ? 0 : 1);\n      }\n    });\n    this.xAxisGroup.select(\".domain\").attr({\n      display: this.config.xAxisShowDomain ? \"block\" : \"none\"\n    });\n    this.yAxisGroup.selectAll(\"path,line\").attr({ stroke: that.config.yAxisStroke });\n    this.xAxisGroup.selectAll(\"path,line\").attr({ stroke: that.config.xAxisStroke });\n    this.xAxisGroupOuter.attr({\n      \"transform\": \"translate(0,\" + (this.yScale.range()[0]) + \")\",\n      display: this.config.xAxisShow && this.config.xAxisShowDomain ? \"block\" : \"none\"\n    });\n    this.xAxisGroupOuter.select(\"line.axis.domain\").attr({\n      x1: this.config.margin + this.yAxisWidth,\n      x2: this.width - this.config.margin,\n      stroke: \"#000\"\n    });\n    this.yAxisGroup.attr({\n      \"transform\": \"translate(\" + (this.xscale.range()[0] - 2) +\",0)\",\n      display: this.config.yAxisShow ? \"block\" : \"none\"\n    }).select(\".domain\").attr({\n      display: this.config.yAxisShowDomain ? \"block\" : \"none\"\n    });\n    this.yAxisGroup.selectAll(\".tick text\").each(function(it){ \n      d3.select(this).text(parseInt(100*Math.abs(it - that.globalBase))/100);\n    });\n    this.svg.selectAll(\"text\").attr({\n      \"font-size\": that.config.fontSize\n    });\n    d3.select(\"#chart-title\").text(this.config.title);\n  }\n}"},"assets":[],"dimension":{"value":{"type":[{"name":"Number","default":0,"level":8,"basetype":[{"name":"Numstring","default":"","level":6,"basetype":[{"name":"Order","level":4,"basetype":[{"name":"String","default":"","level":2,"basetype":[]}],"order":{}}],"order":{}}],"order":{}}],"multiple":true,"require":true,"desc":"y axis value","fields":[{"data":["79.0","97.0","82.0","98.0","92.0","95.55848434925865","79.0","94.0","81.0","96.0","84.0","93.0","80.0","93.0","73.0","93.0","85.0","97.0","87.0","98.0","95.0","98.23723228995058","83.0","95.0","84.0","97.0","86.0","94.0","83.0","95.0","74.0","94.0","90.0","98.0","86.0","99.0","95.0","95.78418451400329","90.0","97.0","89.0","98.0","91.0","96.0","89.0","96.0","85.0","95.0","95.0","99.0","96.0","99.0","98.0","99.22405271828666","95.0","99.0","95.0","99.0","95.0","97.0","94.0","98.0","93.0","98.0","95.0","96.0","96.0","97.0","96.0","96.79571663920922","95.0","97.0","95.0","97.0","96.0","96.0","95.0","96.0","95.0","96.0","96.0","97.0","97.0","98.0","97.0","97.0","97.0","98.0","96.0","98.0","97.0","97.0","97.0","97.0","96.0","98.0","96.0","97.0","89.0","98.0","97.0","98.13014827018122","97.0","98.0","96.0","98.0","97.0","97.0","97.0","97.0","96.0","98.0","97.0","98.0","98.0","99.0","97.0","98.2652388797364","97.0","98.0","97.0","99.0","98.0","98.0","97.0","98.0","97.0","98.0"],"datatype":"Number","name":"1","bind":"value","key":0,"dataset":0},{"data":["74.0","93.0","78.0","91.0","88.0","97.0","71.62526766595289","86.0","77.0","89.0","71.0","87.0","75.0","85.0","69.0","83.0","79.0","94.0","79.0","92.0","90.0","98.0","80.0","89.0","75.0","90.0","76.0","87.0","75.0","88.0","72.0","85.0","86.0","96.0","85.0","96.0","95.0","94.0","86.83654532476803","92.0","82.0","95.0","84.0","93.0","86.0","93.0","78.0","90.0","93.0","98.0","95.0","98.0","98.0","99.0","93.49393290506781","96.0","90.0","98.0","92.0","96.0","93.0","96.0","91.0","95.0","95.0","96.0","95.0","96.0","95.0","96.0","95.0","96.0","95.0","96.0","95.0","95.0","95.0","95.0","95.0","96.0","96.0","97.0","97.0","94.0","96.0","97.0","96.30121341898644","97.0","96.0","97.0","96.0","96.0","96.0","96.0","96.0","97.0","96.0","97.0","97.0","97.0","96.0","99.0","96.0","97.0","96.0","97.0","96.0","96.0","96.0","96.0","96.0","97.0","97.0","98.0","97.0","98.0","97.0","98.0","98.29193433261956","97.0","97.0","98.0","96.0","97.0","97.0","97.0","97.0","98.0"],"datatype":"Number","name":"6","bind":"value","key":0,"dataset":0},{"data":["72.0","91.0","71.0","92.0","89.0","90.0","77.0","82.0","82.25","84.0","70.0","82.0","72.0","85.0","68.0","77.0","76.0","92.0","79.0","93.0","90.0","95.0","77.0","85.0","74.0","87.0","75.0","85.0","77.0","85.0","72.0","80.0","80.0","95.0","86.0","96.0","93.0","97.0","84.0","92.0","81.0","90.0","78.0","90.0","85.0","92.0","80.0","89.0","92.0","97.0","93.0","97.0","97.0","98.0","92.0","96.0","90.0","96.0","89.0","95.0","93.0","96.0","90.0","93.0","95.0","96.0","95.0","96.0","95.0","99.0","95.0","99.0","95.0","96.0","94.0","95.0","95.0","95.0","94.0","71.0","96.0","97.0","97.0","97.0","97.0","97.0","96.0","97.0","96.0","97.0","95.0","96.0","96.0","96.0","96.0","97.0","96.0","96.0","96.0","96.0","96.0","97.0","96.0","97.0","95.35810810810811","97.0","95.0","96.0","96.0","96.0","95.0","97.0","96.0","98.0","97.0","97.0","97.0","99.0","97.0","98.0","97.0","98.0","96.0","97.0","97.0","97.0","99.0","97.0"],"datatype":"Number","name":"13","bind":"value","key":0,"dataset":0},{"data":["80","87","81","89","87","95","77","79","79","81","70","80","76","73","63","77","74","90","73","88","89","94","75","85","72","84","70","80","71","85","67","80","83","93","85","94","92","97","84","90","82","89","78","89","80","90","79","87","91","96","93","95","96","98","92","95","91","94","90","93","89","95","89","93","94","96","95","96","96","96","95","95","95","96","94","95","94","78","95","96","96","97","96","97","97","97","96","96","96","97","97","96","96","96","96","97","95","97","96","96","96","97","96","96","96","97","95","96","96","96","95","96","96","97","97","97","97","98","96","97","96","97","96","97","97","97","96","97"],"datatype":"Number","name":"20","bind":"value","key":0,"dataset":0},{"data":["92.0","80.0","87.0","86.0","85.0","94.0","90.0","80.0","75.0","72.0","65.0","73.0","74.05591054313099","75.0","65.0","74.0","90.0","86.0","75.0","85.0","87.0","93.0","93.0","80.0","78.0","81.0","68.0","77.0","67.0","79.0","67.0","78.0","82.0","91.0","83.0","89.0","91.0","97.0","82.0","89.0","81.0","90.0","79.0","87.0","77.0","86.0","78.0","85.0","91.0","95.0","91.0","96.0","95.0","98.0","91.0","94.0","91.0","96.0","90.0","93.0","88.0","92.0","89.0","92.0","94.0","96.0","95.0","95.0","95.0","96.0","95.0","95.0","94.0","77.0","94.0","95.0","94.0","95.0","94.0","96.0","95.0","97.0","96.0","97.0","96.0","97.0","95.0","96.0","95.0","96.0","96.0","96.0","95.0","96.0","95.0","97.0","95.0","97.0","96.0","96.0","96.0","97.0","96.0","96.0","95.0","96.0","95.0","96.0","95.0","96.0","95.0","96.0","96.0","97.0","97.0","97.0","97.0","98.0","96.0","97.0","96.0","97.0","96.0","96.0","96.0","97.0","96.0","97.0"],"datatype":"Number","name":"27","bind":"value","key":0,"dataset":0}],"fieldName":["1","6","13","20","27"]},"order":{"type":[{"name":"Order","level":4,"basetype":[{"name":"String","default":"","level":2,"basetype":[]}],"order":{}}],"require":true,"desc":"x axis index","fields":[{"data":["2024-04-16","2024-04-18","2024-04-23","2024-04-25","2024-04-30","2024-05-02","2024-05-07","2024-05-09","2024-05-14","2024-05-16","2024-05-21","2024-05-23","2024-05-28","2024-05-30","2024-06-04","2024-06-06","2024-04-16","2024-04-18","2024-04-23","2024-04-25","2024-04-30","2024-05-02","2024-05-07","2024-05-09","2024-05-14","2024-05-16","2024-05-21","2024-05-23","2024-05-28","2024-05-30","2024-06-04","2024-06-06","2024-04-16","2024-04-18","2024-04-23","2024-04-25","2024-04-30","2024-05-02","2024-05-07","2024-05-09","2024-05-14","2024-05-16","2024-05-21","2024-05-23","2024-05-28","2024-05-30","2024-06-04","2024-06-06","2024-04-16","2024-04-18","2024-04-23","2024-04-25","2024-04-30","2024-05-02","2024-05-07","2024-05-09","2024-05-14","2024-05-16","2024-05-21","2024-05-23","2024-05-28","2024-05-30","2024-06-04","2024-06-06","2024-04-16","2024-04-18","2024-04-23","2024-04-25","2024-04-30","2024-05-02","2024-05-07","2024-05-09","2024-05-14","2024-05-16","2024-05-21","2024-05-23","2024-05-28","2024-05-30","2024-06-04","2024-06-06","2024-04-16","2024-04-18","2024-04-23","2024-04-25","2024-04-30","2024-05-02","2024-05-07","2024-05-09","2024-05-14","2024-05-16","2024-05-21","2024-05-23","2024-05-28","2024-05-30","2024-06-04","2024-06-06","2024-04-16","2024-04-18","2024-04-23","2024-04-25","2024-04-30","2024-05-02","2024-05-07","2024-05-09","2024-05-14","2024-05-16","2024-05-21","2024-05-23","2024-05-28","2024-05-30","2024-06-04","2024-06-06","2024-04-16","2024-04-18","2024-04-23","2024-04-25","2024-04-30","2024-05-02","2024-05-07","2024-05-09","2024-05-14","2024-05-16","2024-05-21","2024-05-23","2024-05-28","2024-05-30","2024-06-04","2024-06-06"],"datatype":"Date","name":"check-in","bind":"order","key":0,"dataset":0}],"fieldName":["check-in"]}},"config":{"sort":{"name":"Sort data","type":[{"name":"Choice","level":20,"values":["Ascending","Descending","None"],"default":""}],"value":"Ascending","default":"Descending","category":"Value","rebindOnChange":true},"unit":{"desc":"Unit of value","name":"Unit","type":[{"name":"String","level":2,"default":"","basetype":[]}],"value":"","default":"","category":"Value"},"margin":{"name":"Margin","type":[{"name":"Number","level":8,"order":{},"default":0,"basetype":[{"name":"Numstring","level":6,"order":{},"default":"","basetype":[{"name":"Order","level":4,"order":{},"basetype":[{"name":"String","level":2,"default":"","basetype":[]}]}]}]}],"value":10,"default":10,"category":"Global Settings"},"sortBy":{"name":"Sort By","type":[{"name":"Choice","level":20,"values":["Value","Order"],"default":""}],"value":"Order","default":"Order","category":"Value","rebindOnChange":true},"stroke":{"desc":"Stroke Color","name":"Stroke","type":[{"Gray":"#cccccc","name":"Color","Empty":"#ffffff","level":10,"Neutral":"#cccccc","default":"#dc4521","subtype":{"neutral":"neutral","negative":"negative","positive":"positive"},"Negative":"#d93510","Positive":"#3f7ab5"}],"value":"#ffffff","default":"#999","category":"Global Settings"},"padding":{"name":"Padding","type":[{"name":"Number","level":8,"order":{},"default":0,"basetype":[{"name":"Numstring","level":6,"order":{},"default":"","basetype":[{"name":"Order","level":4,"order":{},"basetype":[{"name":"String","level":2,"default":"","basetype":[]}]}]}]}],"value":10,"default":10,"category":"Global Settings"},"palette":{"name":"Palette","type":[{"re":{},"name":"Palette","level":30,"scale":{},"binary":{"colors":[{"hex":"#ff8356"},{"hex":"#0076a1"}]},"plotdb":{"colors":[{"hex":"#ed1d78"},{"hex":"#c59b6d"},{"hex":"#8cc63f"},{"hex":"#28aae2"}]},"default":{"colors":[{"hex":"#1d3263"},{"hex":"#226c87"},{"hex":"#f8d672"},{"hex":"#e48e11"},{"hex":"#e03215"},{"hex":"#ab2321"}]},"subtype":{"binary":"binary","diverging":"diverging","sequential":"sequential","qualitative":"qualitative"},"diverging":{"colors":[{"hex":"#74001a"},{"hex":"#cd2149"},{"hex":"#f23971"},{"hex":"#ff84ab"},{"hex":"#ffc3d7"},{"hex":"#f2f2dd"},{"hex":"#b8d9ed"},{"hex":"#81b1d0"},{"hex":"#3d8bb7"},{"hex":"#0071a8"},{"hex":"#003558"}]},"sequential":{"colors":[{"hex":"#950431"},{"hex":"#be043e"},{"hex":"#ec326d"},{"hex":"#fc82a9"},{"hex":"#febed2"},{"hex":"#fee6ee"}]},"qualitative":{"colors":[{"hex":"#c05ae0"},{"hex":"#cf2d0c"},{"hex":"#e9ab1e"},{"hex":"#86ffb5"},{"hex":"#64dfff"},{"hex":"#003f7d"}]}}],"value":{"colors":[{"hex":"#f4502a","idx":0,"$$hashKey":"object:80"},{"hex":"#f1c227","idx":1,"$$hashKey":"object:81"},{"hex":"#008a6d","idx":2,"$$hashKey":"object:82"},{"hex":"#00acdb","idx":3,"$$hashKey":"object:83"},{"hex":"#0064a8","idx":4,"$$hashKey":"object:84"}]},"default":{"colors":[{"hex":"#f4502a"},{"hex":"#f1c227"},{"hex":"#008a6d"},{"hex":"#00acdb"},{"hex":"#0064a8"}]},"category":"Global Settings"},"fontSize":{"name":"Font Size","type":[{"name":"Number","level":8,"order":{},"default":0,"basetype":[{"name":"Numstring","level":6,"order":{},"default":"","basetype":[{"name":"Order","level":4,"order":{},"basetype":[{"name":"String","level":2,"default":"","basetype":[]}]}]}]}],"value":"12","default":13,"category":"Global Settings"},"textFill":{"name":"Text Color","type":[{"Gray":"#cccccc","name":"Color","Empty":"#ffffff","level":10,"Neutral":"#cccccc","default":"#dc4521","subtype":{"neutral":"neutral","negative":"negative","positive":"positive"},"Negative":"#d93510","Positive":"#3f7ab5"}],"value":"#353535","default":"#000000","category":"Global Settings"},"popupShow":{"desc":"show Popup when user hovers over elements","name":"show Popup","type":[{"name":"Boolean","level":8,"order":{},"default":true,"basetype":[{"name":"Order","level":4,"order":{},"basetype":[{"name":"String","level":2,"default":"","basetype":[]}]}]}],"value":true,"default":true,"category":"Popup","rebindOnChange":true},"xAxisShow":{"name":"Show Axis","type":[{"name":"Boolean","level":8,"order":{},"default":true,"basetype":[{"name":"Order","level":4,"order":{},"basetype":[{"name":"String","level":2,"default":"","basetype":[]}]}]}],"value":true,"default":true,"category":"X Axis"},"yAxisShow":{"name":"Show Axis","type":[{"name":"Boolean","level":8,"order":{},"default":true,"basetype":[{"name":"Order","level":4,"order":{},"basetype":[{"name":"String","level":2,"default":"","basetype":[]}]}]}],"value":true,"default":true,"category":"Y Axis"},"background":{"name":"Background","type":[{"Gray":"#cccccc","name":"Color","Empty":"#ffffff","level":10,"Neutral":"#cccccc","default":"#dc4521","subtype":{"neutral":"neutral","negative":"negative","positive":"positive"},"Negative":"#d93510","Positive":"#3f7ab5"}],"value":"#ffffff","default":"#ffffff","category":"Global Settings"},"fontFamily":{"name":"Font","type":[{"name":"String","level":2,"default":"","basetype":[]}],"value":"Arial","default":"Arial","category":"Global Settings"},"legendShow":{"name":"Show Legend","type":[{"name":"Boolean","level":8,"order":{},"default":true,"basetype":[{"name":"Order","level":4,"order":{},"basetype":[{"name":"String","level":2,"default":"","basetype":[]}]}]}],"value":true,"default":true,"category":"Legend"},"xAxisLabel":{"name":"Label","type":[{"name":"String","level":2,"default":"","basetype":[]}],"value":"","default":"","category":"X Axis"},"yAxisLabel":{"name":"Label","type":[{"name":"String","level":2,"default":"","basetype":[]}],"value":"","default":"","category":"Y Axis"},"legendLabel":{"name":"Label","type":[{"name":"String","level":2,"default":"","basetype":[]}],"category":"Legend"},"strokeWidth":{"desc":"Default Stroke width","name":"Stroke Width","type":[{"name":"Number","level":8,"order":{},"default":0,"basetype":[{"name":"Numstring","level":6,"order":{},"default":"","basetype":[{"name":"Order","level":4,"order":{},"basetype":[{"name":"String","level":2,"default":"","basetype":[]}]}]}]}],"value":"2","default":"2","category":"Global Settings"},"xAxisStroke":{"name":"Stroke Color","type":[{"Gray":"#cccccc","name":"Color","Empty":"#ffffff","level":10,"Neutral":"#cccccc","default":"#dc4521","subtype":{"neutral":"neutral","negative":"negative","positive":"positive"},"Negative":"#d93510","Positive":"#3f7ab5"}],"value":"#000000","default":"#000","category":"X Axis"},"yAxisStroke":{"name":"Stroke Color","type":[{"Gray":"#cccccc","name":"Color","Empty":"#ffffff","level":10,"Neutral":"#cccccc","default":"#dc4521","subtype":{"neutral":"neutral","negative":"negative","positive":"positive"},"Negative":"#d93510","Positive":"#3f7ab5"}],"value":"#000000","default":"#000","category":"Y Axis"},"boxRoundness":{"name":"Block Roundness","type":[{"name":"Number","level":8,"order":{},"default":0,"basetype":[{"name":"Numstring","level":6,"order":{},"default":"","basetype":[{"name":"Order","level":4,"order":{},"basetype":[{"name":"String","level":2,"default":"","basetype":[]}]}]}]}],"value":"0","default":0,"category":"Global Settings"},"xAxisTickCount":{"desc":"Hint on number of tick. Actual number will be decided by program","name":"Tick Count","type":[{"name":"Number","level":8,"order":{},"default":0,"basetype":[{"name":"Numstring","level":6,"order":{},"default":"","basetype":[{"name":"Order","level":4,"order":{},"basetype":[{"name":"String","level":2,"default":"","basetype":[]}]}]}]}],"value":6,"default":6,"category":"X Axis"},"yAxisTickCount":{"desc":"Hint on number of tick. Actual number will be decided by program","name":"Tick Count","type":[{"name":"Number","level":8,"order":{},"default":0,"basetype":[{"name":"Numstring","level":6,"order":{},"default":"","basetype":[{"name":"Order","level":4,"order":{},"basetype":[{"name":"String","level":2,"default":"","basetype":[]}]}]}]}],"value":6,"default":6,"category":"Y Axis"},"xAxisShowDomain":{"name":"Show Basline","type":[{"name":"Boolean","level":8,"order":{},"default":true,"basetype":[{"name":"Order","level":4,"order":{},"basetype":[{"name":"String","level":2,"default":"","basetype":[]}]}]}],"value":true,"default":true,"category":"X Axis"},"yAxisShowDomain":{"name":"Show Basline","type":[{"name":"Boolean","level":8,"order":{},"default":true,"basetype":[{"name":"Order","level":4,"order":{},"basetype":[{"name":"String","level":2,"default":"","basetype":[]}]}]}],"value":true,"default":true,"category":"Y Axis"},"xAxisTickPadding":{"name":"Tick Padding","type":[{"name":"Number","level":8,"order":{},"default":0,"basetype":[{"name":"Numstring","level":6,"order":{},"default":"","basetype":[{"name":"Order","level":4,"order":{},"basetype":[{"name":"String","level":2,"default":"","basetype":[]}]}]}]}],"value":4,"default":4,"category":"X Axis"},"yAxisTickPadding":{"name":"Tick Padding","type":[{"name":"Number","level":8,"order":{},"default":0,"basetype":[{"name":"Numstring","level":6,"order":{},"default":"","basetype":[{"name":"Order","level":4,"order":{},"basetype":[{"name":"String","level":2,"default":"","basetype":[]}]}]}]}],"value":4,"default":4,"category":"Y Axis"},"xAxisHandleOverlap":{"desc":"How should overlapped ticks be taken care?","name":"Overlap Ticks","type":[{"name":"Choice","level":20,"values":["none","hidden","offset"],"default":""}],"value":"hidden","default":"hidden","category":"X Axis"},"xAxisTickDirection":{"name":"Tick Direction","type":[{"name":"Choice","level":20,"values":["vertical","horizontal"],"default":""}],"value":"horizontal","default":"horizontal","category":"X Axis"},"xAxisTickSizeInner":{"name":"Inner Tick Size","type":[{"name":"Number","level":8,"order":{},"default":0,"basetype":[{"name":"Numstring","level":6,"order":{},"default":"","basetype":[{"name":"Order","level":4,"order":{},"basetype":[{"name":"String","level":2,"default":"","basetype":[]}]}]}]}],"value":4,"default":4,"category":"X Axis"},"xAxisTickSizeOuter":{"name":"Outer Tick Size","type":[{"name":"Number","level":8,"order":{},"default":0,"basetype":[{"name":"Numstring","level":6,"order":{},"default":"","basetype":[{"name":"Order","level":4,"order":{},"basetype":[{"name":"String","level":2,"default":"","basetype":[]}]}]}]}],"value":0,"default":0,"category":"X Axis"},"yAxisLabelPosition":{"name":"Label Position","type":[{"name":"Choice","level":20,"values":["in","center"],"default":""}],"value":"center","default":"center","category":"Y Axis"},"yAxisTickSizeInner":{"name":"Inner Tick Size","type":[{"name":"Number","level":8,"order":{},"default":0,"basetype":[{"name":"Numstring","level":6,"order":{},"default":"","basetype":[{"name":"Order","level":4,"order":{},"basetype":[{"name":"String","level":2,"default":"","basetype":[]}]}]}]}],"value":4,"default":4,"category":"Y Axis"},"yAxisTickSizeOuter":{"name":"Outer Tick Size","type":[{"name":"Number","level":8,"order":{},"default":0,"basetype":[{"name":"Numstring","level":6,"order":{},"default":"","basetype":[{"name":"Order","level":4,"order":{},"basetype":[{"name":"String","level":2,"default":"","basetype":[]}]}]}]}],"value":0,"default":0,"category":"Y Axis"}},"library":["d3/3.5.12/min","plotd3/0.1.0"],"local":null,"inherit":[],"metashow":null,"footer":null}